// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluent;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApiKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApiKeyArgs Empty = new ApiKeyArgs();

    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * Description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Environment ID
     * 
     */
    @Import(name="environmentId", required=true)
    private Output<String> environmentId;

    /**
     * @return Environment ID
     * 
     */
    public Output<String> environmentId() {
        return this.environmentId;
    }

    /**
     * Logical Cluster ID List to create API Key
     * 
     */
    @Import(name="logicalClusters")
    private @Nullable Output<List<String>> logicalClusters;

    /**
     * @return Logical Cluster ID List to create API Key
     * 
     */
    public Optional<Output<List<String>>> logicalClusters() {
        return Optional.ofNullable(this.logicalClusters);
    }

    /**
     * User ID
     * 
     */
    @Import(name="userId")
    private @Nullable Output<Integer> userId;

    /**
     * @return User ID
     * 
     */
    public Optional<Output<Integer>> userId() {
        return Optional.ofNullable(this.userId);
    }

    private ApiKeyArgs() {}

    private ApiKeyArgs(ApiKeyArgs $) {
        this.clusterId = $.clusterId;
        this.description = $.description;
        this.environmentId = $.environmentId;
        this.logicalClusters = $.logicalClusters;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApiKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApiKeyArgs $;

        public Builder() {
            $ = new ApiKeyArgs();
        }

        public Builder(ApiKeyArgs defaults) {
            $ = new ApiKeyArgs(Objects.requireNonNull(defaults));
        }

        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param description Description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param environmentId Environment ID
         * 
         * @return builder
         * 
         */
        public Builder environmentId(Output<String> environmentId) {
            $.environmentId = environmentId;
            return this;
        }

        /**
         * @param environmentId Environment ID
         * 
         * @return builder
         * 
         */
        public Builder environmentId(String environmentId) {
            return environmentId(Output.of(environmentId));
        }

        /**
         * @param logicalClusters Logical Cluster ID List to create API Key
         * 
         * @return builder
         * 
         */
        public Builder logicalClusters(@Nullable Output<List<String>> logicalClusters) {
            $.logicalClusters = logicalClusters;
            return this;
        }

        /**
         * @param logicalClusters Logical Cluster ID List to create API Key
         * 
         * @return builder
         * 
         */
        public Builder logicalClusters(List<String> logicalClusters) {
            return logicalClusters(Output.of(logicalClusters));
        }

        /**
         * @param logicalClusters Logical Cluster ID List to create API Key
         * 
         * @return builder
         * 
         */
        public Builder logicalClusters(String... logicalClusters) {
            return logicalClusters(List.of(logicalClusters));
        }

        /**
         * @param userId User ID
         * 
         * @return builder
         * 
         */
        public Builder userId(@Nullable Output<Integer> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId User ID
         * 
         * @return builder
         * 
         */
        public Builder userId(Integer userId) {
            return userId(Output.of(userId));
        }

        public ApiKeyArgs build() {
            $.environmentId = Objects.requireNonNull($.environmentId, "expected parameter 'environmentId' to be non-null");
            return $;
        }
    }

}
