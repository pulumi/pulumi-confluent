// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluent;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class SchemaRegistryArgs extends com.pulumi.resources.ResourceArgs {

    public static final SchemaRegistryArgs Empty = new SchemaRegistryArgs();

    /**
     * Environment ID
     * 
     */
    @Import(name="environmentId", required=true)
    private Output<String> environmentId;

    /**
     * @return Environment ID
     * 
     */
    public Output<String> environmentId() {
        return this.environmentId;
    }

    /**
     * where
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return where
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * Cloud provider
     * 
     */
    @Import(name="serviceProvider", required=true)
    private Output<String> serviceProvider;

    /**
     * @return Cloud provider
     * 
     */
    public Output<String> serviceProvider() {
        return this.serviceProvider;
    }

    private SchemaRegistryArgs() {}

    private SchemaRegistryArgs(SchemaRegistryArgs $) {
        this.environmentId = $.environmentId;
        this.region = $.region;
        this.serviceProvider = $.serviceProvider;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SchemaRegistryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SchemaRegistryArgs $;

        public Builder() {
            $ = new SchemaRegistryArgs();
        }

        public Builder(SchemaRegistryArgs defaults) {
            $ = new SchemaRegistryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param environmentId Environment ID
         * 
         * @return builder
         * 
         */
        public Builder environmentId(Output<String> environmentId) {
            $.environmentId = environmentId;
            return this;
        }

        /**
         * @param environmentId Environment ID
         * 
         * @return builder
         * 
         */
        public Builder environmentId(String environmentId) {
            return environmentId(Output.of(environmentId));
        }

        /**
         * @param region where
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region where
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param serviceProvider Cloud provider
         * 
         * @return builder
         * 
         */
        public Builder serviceProvider(Output<String> serviceProvider) {
            $.serviceProvider = serviceProvider;
            return this;
        }

        /**
         * @param serviceProvider Cloud provider
         * 
         * @return builder
         * 
         */
        public Builder serviceProvider(String serviceProvider) {
            return serviceProvider(Output.of(serviceProvider));
        }

        public SchemaRegistryArgs build() {
            $.environmentId = Objects.requireNonNull($.environmentId, "expected parameter 'environmentId' to be non-null");
            $.region = Objects.requireNonNull($.region, "expected parameter 'region' to be non-null");
            $.serviceProvider = Objects.requireNonNull($.serviceProvider, "expected parameter 'serviceProvider' to be non-null");
            return $;
        }
    }

}
