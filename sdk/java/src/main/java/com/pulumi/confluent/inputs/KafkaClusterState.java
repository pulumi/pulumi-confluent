// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluent.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KafkaClusterState extends com.pulumi.resources.ResourceArgs {

    public static final KafkaClusterState Empty = new KafkaClusterState();

    /**
     * LOW(single-zone) or HIGH(multi-zone)
     * 
     */
    @Import(name="availability")
    private @Nullable Output<String> availability;

    /**
     * @return LOW(single-zone) or HIGH(multi-zone)
     * 
     */
    public Optional<Output<String>> availability() {
        return Optional.ofNullable(this.availability);
    }

    @Import(name="bootstrapServers")
    private @Nullable Output<String> bootstrapServers;

    public Optional<Output<String>> bootstrapServers() {
        return Optional.ofNullable(this.bootstrapServers);
    }

    /**
     * cku
     * 
     */
    @Import(name="cku")
    private @Nullable Output<Integer> cku;

    /**
     * @return cku
     * 
     */
    public Optional<Output<Integer>> cku() {
        return Optional.ofNullable(this.cku);
    }

    /**
     * Deployment settings. Currently only `sku` is supported.
     * 
     */
    @Import(name="deployment")
    private @Nullable Output<Map<String,String>> deployment;

    /**
     * @return Deployment settings. Currently only `sku` is supported.
     * 
     */
    public Optional<Output<Map<String,String>>> deployment() {
        return Optional.ofNullable(this.deployment);
    }

    /**
     * Environment ID
     * 
     */
    @Import(name="environmentId")
    private @Nullable Output<String> environmentId;

    /**
     * @return Environment ID
     * 
     */
    public Optional<Output<String>> environmentId() {
        return Optional.ofNullable(this.environmentId);
    }

    /**
     * The name of the cluster
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the cluster
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Network egress limit(MBps)
     * 
     */
    @Import(name="networkEgress")
    private @Nullable Output<Integer> networkEgress;

    /**
     * @return Network egress limit(MBps)
     * 
     */
    public Optional<Output<Integer>> networkEgress() {
        return Optional.ofNullable(this.networkEgress);
    }

    /**
     * Network ingress limit(MBps)
     * 
     */
    @Import(name="networkIngress")
    private @Nullable Output<Integer> networkIngress;

    /**
     * @return Network ingress limit(MBps)
     * 
     */
    public Optional<Output<Integer>> networkIngress() {
        return Optional.ofNullable(this.networkIngress);
    }

    /**
     * where
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return where
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * AWS / GCP
     * 
     */
    @Import(name="serviceProvider")
    private @Nullable Output<String> serviceProvider;

    /**
     * @return AWS / GCP
     * 
     */
    public Optional<Output<String>> serviceProvider() {
        return Optional.ofNullable(this.serviceProvider);
    }

    /**
     * Storage limit(GB)
     * 
     */
    @Import(name="storage")
    private @Nullable Output<Integer> storage;

    /**
     * @return Storage limit(GB)
     * 
     */
    public Optional<Output<Integer>> storage() {
        return Optional.ofNullable(this.storage);
    }

    private KafkaClusterState() {}

    private KafkaClusterState(KafkaClusterState $) {
        this.availability = $.availability;
        this.bootstrapServers = $.bootstrapServers;
        this.cku = $.cku;
        this.deployment = $.deployment;
        this.environmentId = $.environmentId;
        this.name = $.name;
        this.networkEgress = $.networkEgress;
        this.networkIngress = $.networkIngress;
        this.region = $.region;
        this.serviceProvider = $.serviceProvider;
        this.storage = $.storage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KafkaClusterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KafkaClusterState $;

        public Builder() {
            $ = new KafkaClusterState();
        }

        public Builder(KafkaClusterState defaults) {
            $ = new KafkaClusterState(Objects.requireNonNull(defaults));
        }

        /**
         * @param availability LOW(single-zone) or HIGH(multi-zone)
         * 
         * @return builder
         * 
         */
        public Builder availability(@Nullable Output<String> availability) {
            $.availability = availability;
            return this;
        }

        /**
         * @param availability LOW(single-zone) or HIGH(multi-zone)
         * 
         * @return builder
         * 
         */
        public Builder availability(String availability) {
            return availability(Output.of(availability));
        }

        public Builder bootstrapServers(@Nullable Output<String> bootstrapServers) {
            $.bootstrapServers = bootstrapServers;
            return this;
        }

        public Builder bootstrapServers(String bootstrapServers) {
            return bootstrapServers(Output.of(bootstrapServers));
        }

        /**
         * @param cku cku
         * 
         * @return builder
         * 
         */
        public Builder cku(@Nullable Output<Integer> cku) {
            $.cku = cku;
            return this;
        }

        /**
         * @param cku cku
         * 
         * @return builder
         * 
         */
        public Builder cku(Integer cku) {
            return cku(Output.of(cku));
        }

        /**
         * @param deployment Deployment settings. Currently only `sku` is supported.
         * 
         * @return builder
         * 
         */
        public Builder deployment(@Nullable Output<Map<String,String>> deployment) {
            $.deployment = deployment;
            return this;
        }

        /**
         * @param deployment Deployment settings. Currently only `sku` is supported.
         * 
         * @return builder
         * 
         */
        public Builder deployment(Map<String,String> deployment) {
            return deployment(Output.of(deployment));
        }

        /**
         * @param environmentId Environment ID
         * 
         * @return builder
         * 
         */
        public Builder environmentId(@Nullable Output<String> environmentId) {
            $.environmentId = environmentId;
            return this;
        }

        /**
         * @param environmentId Environment ID
         * 
         * @return builder
         * 
         */
        public Builder environmentId(String environmentId) {
            return environmentId(Output.of(environmentId));
        }

        /**
         * @param name The name of the cluster
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the cluster
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkEgress Network egress limit(MBps)
         * 
         * @return builder
         * 
         */
        public Builder networkEgress(@Nullable Output<Integer> networkEgress) {
            $.networkEgress = networkEgress;
            return this;
        }

        /**
         * @param networkEgress Network egress limit(MBps)
         * 
         * @return builder
         * 
         */
        public Builder networkEgress(Integer networkEgress) {
            return networkEgress(Output.of(networkEgress));
        }

        /**
         * @param networkIngress Network ingress limit(MBps)
         * 
         * @return builder
         * 
         */
        public Builder networkIngress(@Nullable Output<Integer> networkIngress) {
            $.networkIngress = networkIngress;
            return this;
        }

        /**
         * @param networkIngress Network ingress limit(MBps)
         * 
         * @return builder
         * 
         */
        public Builder networkIngress(Integer networkIngress) {
            return networkIngress(Output.of(networkIngress));
        }

        /**
         * @param region where
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region where
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param serviceProvider AWS / GCP
         * 
         * @return builder
         * 
         */
        public Builder serviceProvider(@Nullable Output<String> serviceProvider) {
            $.serviceProvider = serviceProvider;
            return this;
        }

        /**
         * @param serviceProvider AWS / GCP
         * 
         * @return builder
         * 
         */
        public Builder serviceProvider(String serviceProvider) {
            return serviceProvider(Output.of(serviceProvider));
        }

        /**
         * @param storage Storage limit(GB)
         * 
         * @return builder
         * 
         */
        public Builder storage(@Nullable Output<Integer> storage) {
            $.storage = storage;
            return this;
        }

        /**
         * @param storage Storage limit(GB)
         * 
         * @return builder
         * 
         */
        public Builder storage(Integer storage) {
            return storage(Output.of(storage));
        }

        public KafkaClusterState build() {
            return $;
        }
    }

}
