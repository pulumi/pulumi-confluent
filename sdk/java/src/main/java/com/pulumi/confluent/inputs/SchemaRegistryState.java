// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.confluent.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SchemaRegistryState extends com.pulumi.resources.ResourceArgs {

    public static final SchemaRegistryState Empty = new SchemaRegistryState();

    @Import(name="endpoint")
    private @Nullable Output<String> endpoint;

    public Optional<Output<String>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    /**
     * Environment ID
     * 
     */
    @Import(name="environmentId")
    private @Nullable Output<String> environmentId;

    /**
     * @return Environment ID
     * 
     */
    public Optional<Output<String>> environmentId() {
        return Optional.ofNullable(this.environmentId);
    }

    /**
     * where
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return where
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Cloud provider
     * 
     */
    @Import(name="serviceProvider")
    private @Nullable Output<String> serviceProvider;

    /**
     * @return Cloud provider
     * 
     */
    public Optional<Output<String>> serviceProvider() {
        return Optional.ofNullable(this.serviceProvider);
    }

    private SchemaRegistryState() {}

    private SchemaRegistryState(SchemaRegistryState $) {
        this.endpoint = $.endpoint;
        this.environmentId = $.environmentId;
        this.region = $.region;
        this.serviceProvider = $.serviceProvider;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SchemaRegistryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SchemaRegistryState $;

        public Builder() {
            $ = new SchemaRegistryState();
        }

        public Builder(SchemaRegistryState defaults) {
            $ = new SchemaRegistryState(Objects.requireNonNull(defaults));
        }

        public Builder endpoint(@Nullable Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param environmentId Environment ID
         * 
         * @return builder
         * 
         */
        public Builder environmentId(@Nullable Output<String> environmentId) {
            $.environmentId = environmentId;
            return this;
        }

        /**
         * @param environmentId Environment ID
         * 
         * @return builder
         * 
         */
        public Builder environmentId(String environmentId) {
            return environmentId(Output.of(environmentId));
        }

        /**
         * @param region where
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region where
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param serviceProvider Cloud provider
         * 
         * @return builder
         * 
         */
        public Builder serviceProvider(@Nullable Output<String> serviceProvider) {
            $.serviceProvider = serviceProvider;
            return this;
        }

        /**
         * @param serviceProvider Cloud provider
         * 
         * @return builder
         * 
         */
        public Builder serviceProvider(String serviceProvider) {
            return serviceProvider(Output.of(serviceProvider));
        }

        public SchemaRegistryState build() {
            return $;
        }
    }

}
