// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Confluent
{
    [ConfluentResourceType("confluent:index/connector:Connector")]
    public partial class Connector : Pulumi.CustomResource
    {
        /// <summary>
        /// ID of containing cluster, e.g. lkc-abc123
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// Type-specific Configuration of connector. String keys and values
        /// </summary>
        [Output("config")]
        public Output<ImmutableDictionary<string, object>> Config { get; private set; } = null!;

        /// <summary>
        /// Sensitive part of connector configuration. String keys and values
        /// </summary>
        [Output("configSensitive")]
        public Output<ImmutableDictionary<string, object>?> ConfigSensitive { get; private set; } = null!;

        /// <summary>
        /// ID of containing environment, e.g. env-abc123
        /// </summary>
        [Output("environmentId")]
        public Output<string> EnvironmentId { get; private set; } = null!;

        /// <summary>
        /// The name of the connector
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a Connector resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Connector(string name, ConnectorArgs args, CustomResourceOptions? options = null)
            : base("confluent:index/connector:Connector", name, args ?? new ConnectorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Connector(string name, Input<string> id, ConnectorState? state = null, CustomResourceOptions? options = null)
            : base("confluent:index/connector:Connector", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Connector resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Connector Get(string name, Input<string> id, ConnectorState? state = null, CustomResourceOptions? options = null)
        {
            return new Connector(name, id, state, options);
        }
    }

    public sealed class ConnectorArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of containing cluster, e.g. lkc-abc123
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        [Input("config", required: true)]
        private InputMap<object>? _config;

        /// <summary>
        /// Type-specific Configuration of connector. String keys and values
        /// </summary>
        public InputMap<object> Config
        {
            get => _config ?? (_config = new InputMap<object>());
            set => _config = value;
        }

        [Input("configSensitive")]
        private InputMap<object>? _configSensitive;

        /// <summary>
        /// Sensitive part of connector configuration. String keys and values
        /// </summary>
        public InputMap<object> ConfigSensitive
        {
            get => _configSensitive ?? (_configSensitive = new InputMap<object>());
            set => _configSensitive = value;
        }

        /// <summary>
        /// ID of containing environment, e.g. env-abc123
        /// </summary>
        [Input("environmentId", required: true)]
        public Input<string> EnvironmentId { get; set; } = null!;

        /// <summary>
        /// The name of the connector
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public ConnectorArgs()
        {
        }
    }

    public sealed class ConnectorState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of containing cluster, e.g. lkc-abc123
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("config")]
        private InputMap<object>? _config;

        /// <summary>
        /// Type-specific Configuration of connector. String keys and values
        /// </summary>
        public InputMap<object> Config
        {
            get => _config ?? (_config = new InputMap<object>());
            set => _config = value;
        }

        [Input("configSensitive")]
        private InputMap<object>? _configSensitive;

        /// <summary>
        /// Sensitive part of connector configuration. String keys and values
        /// </summary>
        public InputMap<object> ConfigSensitive
        {
            get => _configSensitive ?? (_configSensitive = new InputMap<object>());
            set => _configSensitive = value;
        }

        /// <summary>
        /// ID of containing environment, e.g. env-abc123
        /// </summary>
        [Input("environmentId")]
        public Input<string>? EnvironmentId { get; set; }

        /// <summary>
        /// The name of the connector
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public ConnectorState()
        {
        }
    }
}
