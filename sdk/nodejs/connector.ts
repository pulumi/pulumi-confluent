// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Connector extends pulumi.CustomResource {
    /**
     * Get an existing Connector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectorState, opts?: pulumi.CustomResourceOptions): Connector {
        return new Connector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluent:index/connector:Connector';

    /**
     * Returns true if the given object is an instance of Connector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Connector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Connector.__pulumiType;
    }

    /**
     * ID of containing cluster, e.g. lkc-abc123
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * Type-specific Configuration of connector. String keys and values
     */
    public readonly config!: pulumi.Output<{[key: string]: any}>;
    /**
     * Sensitive part of connector configuration. String keys and values
     */
    public readonly configSensitive!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * ID of containing environment, e.g. env-abc123
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * The name of the connector
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a Connector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectorArgs | ConnectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectorState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["configSensitive"] = state ? state.configSensitive : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as ConnectorArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["configSensitive"] = args ? args.configSensitive : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Connector.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Connector resources.
 */
export interface ConnectorState {
    /**
     * ID of containing cluster, e.g. lkc-abc123
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Type-specific Configuration of connector. String keys and values
     */
    config?: pulumi.Input<{[key: string]: any}>;
    /**
     * Sensitive part of connector configuration. String keys and values
     */
    configSensitive?: pulumi.Input<{[key: string]: any}>;
    /**
     * ID of containing environment, e.g. env-abc123
     */
    environmentId?: pulumi.Input<string>;
    /**
     * The name of the connector
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Connector resource.
 */
export interface ConnectorArgs {
    /**
     * ID of containing cluster, e.g. lkc-abc123
     */
    clusterId: pulumi.Input<string>;
    /**
     * Type-specific Configuration of connector. String keys and values
     */
    config: pulumi.Input<{[key: string]: any}>;
    /**
     * Sensitive part of connector configuration. String keys and values
     */
    configSensitive?: pulumi.Input<{[key: string]: any}>;
    /**
     * ID of containing environment, e.g. env-abc123
     */
    environmentId: pulumi.Input<string>;
    /**
     * The name of the connector
     */
    name?: pulumi.Input<string>;
}
