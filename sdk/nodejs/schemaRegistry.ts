// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SchemaRegistry extends pulumi.CustomResource {
    /**
     * Get an existing SchemaRegistry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SchemaRegistryState, opts?: pulumi.CustomResourceOptions): SchemaRegistry {
        return new SchemaRegistry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluent:index/schemaRegistry:SchemaRegistry';

    /**
     * Returns true if the given object is an instance of SchemaRegistry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SchemaRegistry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SchemaRegistry.__pulumiType;
    }

    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    /**
     * Environment ID
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * where
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Cloud provider
     */
    public readonly serviceProvider!: pulumi.Output<string>;

    /**
     * Create a SchemaRegistry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SchemaRegistryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SchemaRegistryArgs | SchemaRegistryState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SchemaRegistryState | undefined;
            inputs["endpoint"] = state ? state.endpoint : undefined;
            inputs["environmentId"] = state ? state.environmentId : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["serviceProvider"] = state ? state.serviceProvider : undefined;
        } else {
            const args = argsOrState as SchemaRegistryArgs | undefined;
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.serviceProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceProvider'");
            }
            inputs["environmentId"] = args ? args.environmentId : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["serviceProvider"] = args ? args.serviceProvider : undefined;
            inputs["endpoint"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(SchemaRegistry.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SchemaRegistry resources.
 */
export interface SchemaRegistryState {
    endpoint?: pulumi.Input<string>;
    /**
     * Environment ID
     */
    environmentId?: pulumi.Input<string>;
    /**
     * where
     */
    region?: pulumi.Input<string>;
    /**
     * Cloud provider
     */
    serviceProvider?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SchemaRegistry resource.
 */
export interface SchemaRegistryArgs {
    /**
     * Environment ID
     */
    environmentId: pulumi.Input<string>;
    /**
     * where
     */
    region: pulumi.Input<string>;
    /**
     * Cloud provider
     */
    serviceProvider: pulumi.Input<string>;
}
