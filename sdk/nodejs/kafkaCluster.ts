// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class KafkaCluster extends pulumi.CustomResource {
    /**
     * Get an existing KafkaCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KafkaClusterState, opts?: pulumi.CustomResourceOptions): KafkaCluster {
        return new KafkaCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluent:index/kafkaCluster:KafkaCluster';

    /**
     * Returns true if the given object is an instance of KafkaCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KafkaCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KafkaCluster.__pulumiType;
    }

    /**
     * LOW(single-zone) or HIGH(multi-zone)
     */
    public readonly availability!: pulumi.Output<string>;
    public /*out*/ readonly bootstrapServers!: pulumi.Output<string>;
    /**
     * cku
     */
    public readonly cku!: pulumi.Output<number | undefined>;
    /**
     * Deployment settings. Currently only `sku` is supported.
     */
    public readonly deployment!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Environment ID
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * The name of the cluster
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Network egress limit(MBps)
     */
    public readonly networkEgress!: pulumi.Output<number | undefined>;
    /**
     * Network ingress limit(MBps)
     */
    public readonly networkIngress!: pulumi.Output<number | undefined>;
    /**
     * where
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * AWS / GCP
     */
    public readonly serviceProvider!: pulumi.Output<string>;
    /**
     * Storage limit(GB)
     */
    public readonly storage!: pulumi.Output<number | undefined>;

    /**
     * Create a KafkaCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KafkaClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KafkaClusterArgs | KafkaClusterState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KafkaClusterState | undefined;
            inputs["availability"] = state ? state.availability : undefined;
            inputs["bootstrapServers"] = state ? state.bootstrapServers : undefined;
            inputs["cku"] = state ? state.cku : undefined;
            inputs["deployment"] = state ? state.deployment : undefined;
            inputs["environmentId"] = state ? state.environmentId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkEgress"] = state ? state.networkEgress : undefined;
            inputs["networkIngress"] = state ? state.networkIngress : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["serviceProvider"] = state ? state.serviceProvider : undefined;
            inputs["storage"] = state ? state.storage : undefined;
        } else {
            const args = argsOrState as KafkaClusterArgs | undefined;
            if ((!args || args.availability === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availability'");
            }
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.serviceProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceProvider'");
            }
            inputs["availability"] = args ? args.availability : undefined;
            inputs["cku"] = args ? args.cku : undefined;
            inputs["deployment"] = args ? args.deployment : undefined;
            inputs["environmentId"] = args ? args.environmentId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkEgress"] = args ? args.networkEgress : undefined;
            inputs["networkIngress"] = args ? args.networkIngress : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["serviceProvider"] = args ? args.serviceProvider : undefined;
            inputs["storage"] = args ? args.storage : undefined;
            inputs["bootstrapServers"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(KafkaCluster.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KafkaCluster resources.
 */
export interface KafkaClusterState {
    /**
     * LOW(single-zone) or HIGH(multi-zone)
     */
    availability?: pulumi.Input<string>;
    bootstrapServers?: pulumi.Input<string>;
    /**
     * cku
     */
    cku?: pulumi.Input<number>;
    /**
     * Deployment settings. Currently only `sku` is supported.
     */
    deployment?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Environment ID
     */
    environmentId?: pulumi.Input<string>;
    /**
     * The name of the cluster
     */
    name?: pulumi.Input<string>;
    /**
     * Network egress limit(MBps)
     */
    networkEgress?: pulumi.Input<number>;
    /**
     * Network ingress limit(MBps)
     */
    networkIngress?: pulumi.Input<number>;
    /**
     * where
     */
    region?: pulumi.Input<string>;
    /**
     * AWS / GCP
     */
    serviceProvider?: pulumi.Input<string>;
    /**
     * Storage limit(GB)
     */
    storage?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a KafkaCluster resource.
 */
export interface KafkaClusterArgs {
    /**
     * LOW(single-zone) or HIGH(multi-zone)
     */
    availability: pulumi.Input<string>;
    /**
     * cku
     */
    cku?: pulumi.Input<number>;
    /**
     * Deployment settings. Currently only `sku` is supported.
     */
    deployment?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Environment ID
     */
    environmentId: pulumi.Input<string>;
    /**
     * The name of the cluster
     */
    name?: pulumi.Input<string>;
    /**
     * Network egress limit(MBps)
     */
    networkEgress?: pulumi.Input<number>;
    /**
     * Network ingress limit(MBps)
     */
    networkIngress?: pulumi.Input<number>;
    /**
     * where
     */
    region: pulumi.Input<string>;
    /**
     * AWS / GCP
     */
    serviceProvider: pulumi.Input<string>;
    /**
     * Storage limit(GB)
     */
    storage?: pulumi.Input<number>;
}
