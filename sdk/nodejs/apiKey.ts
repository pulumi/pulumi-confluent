// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ApiKey extends pulumi.CustomResource {
    /**
     * Get an existing ApiKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiKeyState, opts?: pulumi.CustomResourceOptions): ApiKey {
        return new ApiKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluent:index/apiKey:ApiKey';

    /**
     * Returns true if the given object is an instance of ApiKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiKey.__pulumiType;
    }

    public readonly clusterId!: pulumi.Output<string | undefined>;
    /**
     * Description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Environment ID
     */
    public readonly environmentId!: pulumi.Output<string>;
    public /*out*/ readonly key!: pulumi.Output<string>;
    /**
     * Logical Cluster ID List to create API Key
     */
    public readonly logicalClusters!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly secret!: pulumi.Output<string>;
    /**
     * User ID
     */
    public readonly userId!: pulumi.Output<number | undefined>;

    /**
     * Create a ApiKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiKeyArgs | ApiKeyState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiKeyState | undefined;
            inputs["clusterId"] = state ? state.clusterId : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["environmentId"] = state ? state.environmentId : undefined;
            inputs["key"] = state ? state.key : undefined;
            inputs["logicalClusters"] = state ? state.logicalClusters : undefined;
            inputs["secret"] = state ? state.secret : undefined;
            inputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as ApiKeyArgs | undefined;
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            inputs["clusterId"] = args ? args.clusterId : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["environmentId"] = args ? args.environmentId : undefined;
            inputs["logicalClusters"] = args ? args.logicalClusters : undefined;
            inputs["userId"] = args ? args.userId : undefined;
            inputs["key"] = undefined /*out*/;
            inputs["secret"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(ApiKey.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApiKey resources.
 */
export interface ApiKeyState {
    clusterId?: pulumi.Input<string>;
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * Environment ID
     */
    environmentId?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    /**
     * Logical Cluster ID List to create API Key
     */
    logicalClusters?: pulumi.Input<pulumi.Input<string>[]>;
    secret?: pulumi.Input<string>;
    /**
     * User ID
     */
    userId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ApiKey resource.
 */
export interface ApiKeyArgs {
    clusterId?: pulumi.Input<string>;
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * Environment ID
     */
    environmentId: pulumi.Input<string>;
    /**
     * Logical Cluster ID List to create API Key
     */
    logicalClusters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User ID
     */
    userId?: pulumi.Input<number>;
}
